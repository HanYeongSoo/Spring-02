2022-02-16

	1. 프로젝트 생성
		.- start.spring.io 가서 생성
		.- gradle.build로 프로잭트 불러온 후 file -> settings -> gradle검색 후 실행환경 인텔리제이로 변경

	2. 비즈니스 요구사항과 설계
		
	3. 회원 도메인 설계
		.- 도메인 협력 관계 -> 클래스 다이어그램(정적) -> 객체 다이어그램(동적) (뒤로 갈수록 좀 더 자세한 관계로 설명)

	4. 회원 도메인 개발
		.- HashMap에서 동시성 이슈?? 발생이 있을 수 있음 (실무에선)
	
		.- Grade 이라는 Enum생성 (Enum이 뭐지...)
		.- Member 객체 생성
		.- MemberService 인터페이스, MemberServiceImpl 생성
		.- MemberRepository 인터페이스 , MemoryMemberRepository 생성

	5. 회원 도메인 실행과 테스트
		.- 결과 확인은 항상 test쪽에서 하는게 좋음
		.- 초록불 ok! 빨간불 no..

	6. 주문과 할인 도메인 설계
		.- 아직 무엇을 정확하게 사용할 지 모를 때
		.- 주문 서비스 구현체를 만들어 두면 그떄그떄 변경이 아주 용이함

	7. 주문과 할인 도메인 개발
		.- 회원도메인과 구조는 비슷
	
	8. 주문과 할인 도메인 실행과 테스트
		.- 회원도메인과 구조는 비슷


** 새로운 할인 정책을 추가해주세요 라는 요구가 갑자기 들어옴 ** 

	

2022-02-17

	1. 관심사의 분리가 필요함
		.- 너무 구체적으로 구현체를 선정할 필요가 없음
		.- 배우가 상대배우를 섭외하지 않음 -> 공연 기획자가 섭외를 담당해야함
		.- 공연 기획자를 만들어야함 (AppConfig로 생성)

		.- AppConfig class 생성
		.- MemberService를 생성
		.- 생성자를 통해서 객체를 주입 => '생성자 주입' 이라고 함
		.- 이제부터 객체생성은 AppConfig에서 하고, Member(Order)ServiceImpl에서는 생성자에 들어온 값을 토대로 실행만!!

		.- 이것이 DI(Dependency Injection) 의존관계 주입, 의존성 주입이라고 한다.

	
	2. AppConfig 리팩토링
		.- 기존의 코드를 조금 더 분리하여 사용

		** 기존의 FixDiscount를 RateDiscount로 바꾸고 싶다 **
		.- 어디 부분을 수정하면 될까 ?
		.- AppConfig만 수정하면 된다!!

	3. 위의 사항들을 잘 지키고 코드를 구성하였다면 SRP, DIP, OCP를 잘 지켰다고 볼 수 있다.
		.- SRP(단일 책임 원칙) -> 객체 생성과 연결은 config에서 담당
		.- DIP(의존관계 역전 원칙) -> 클라이언트가 추상화 인터페이스에만 의존하도록 설정
		.- OCP(확장에는 열려있고 변경에는 닫혀있어야 함) -> config에서 의존관계만 바꿔주면 됨

	
	4. IoC, DI, 컨테이너

	** 여기서부터 Spring 그 자체를 알아보자 ** 
	
	5. 스프링으로 AppConfig 바꿔보기
		.- ApplicationContext 를 스프링 컨테이너라고 함
		.- @Configuration이 붙은 'AppConfig'를 설정(구성)정보로 사용하고 여기서 @Bean이 달린 메소드를 모두 호출한 후, 반환된 객체를
			스프링 컨테이너에 등록한다. => 스프링 빈 이라고 함
		.- 스프링빈은 applicationContext.getBean()메소드로 찾을 수 있음 getBean()에서 (@Bean으로 등록한 메소드랑 이름 같게, 그 실제 메소드.class)로 호출
		.- 코드가 더 복잡하고 뭔 첨보는것들을 쓰는데...ㅠㅠ

	6. 컨테이너에 등록된 모든 빈 조회하기
		.- ac.getBeanDefinitionNames() : 스프링에 등록된 모든 빈 이름을 조회한다.
		.- ac.getBean() : 빈 이름으로 객체(인스턴스)를 조회한다.

		.- Role ROLE_APPLICATION: 직접 등록한 애플리케이션 빈
             	.- Role ROLE_INFRASTRUCTURE: 스프링 내부에서 사용하는 빈

	
2022-02-18

	1. 스프링 빈 조회 - 기본
		.- 가장 기본적인 조회 방법 -> ac.getBean(빈이름, 타입) or ac.getBean(타입)
		.- 조회 대상 스프링 빈이 없으면 NoSuchBeanDefinitionException 예외 발생

	2. 스프링 빈 조회 - 동일한 타입이 둘 이상
		.- ac.getBeansOfType() 을 사용하면 해당 타입의 모든 빈을 조회할 수 있다.
		.- 동일한 타입의 빈이 둘 이상이면 오류가 발생 -> 빈 이름을 설정해주면 됨

	3. 스프링 빈 조회 - 상속 관계
		.- 최고 부모인 object타입으로 조회하면 모든 스프링 빈이 나옴
		
	** 위에 1,2,3번은 실제로 많이 쓰진 않을것 이지만 개념은 알고 있는게 좋음**

2022-02-21

	1. ApplicationContext 와 BeanFactory
		.- BeanFactory가 상위, 이걸 상속 받고 사용하는것이 ApplicationContext
		.- ApplicationContext를 주로 사용
		.- 여러 부가적인 기능이 존재

	2. 다양한 설정 형식 지원 - 자바 코드, XML
		.- xml파일 설정 코드로 확인 (처음에 @Bean으로 만든 appConfig.class와 거의 거의 코드가 유사함)

	3. 스프링 빈 설정 메타 정보 - BeanDefinition
		.- 요즘은 이걸로 하긴하는데 자동으로 BeanDefinition이 추상화를 해주기 때문에 개발자가 이게 .class에서 온건지
			.xml에서 온건지 몰라도 된다고는 한다.
		.- 막 이 내용에 대해서 깊게 알려고 안해도 된다고 한다...!


2022-02-22
** 싱글톤 컨테이너 **

	1. 웹 어플리케이션과 싱글톤
		.- 처음에 만든 AppConfig.class는 요청할 때 마다 객체가 생성됨  == 메모리 낭비가 심함
		.- 객체를 1개만 생성하고 그 객체를 공유하면 됨 == 싱글톤 패턴

	2. 싱글톤 패턴
		.- 하나의 객체를 공유해서 효율적으로 관리가 가능하지만....단점이 좀 많음
		.- 단점 : 코드도 직접 입력해야하고, DIP 위반, OCP위반, 테스트하기 번거로움등등...
		.- 그럼 쓰라는 거야 말라는거야..?

2022-02-23
	
	3. 싱글톤 컨테이너
		.- 각 클라이언트의 요청에 따라서 동일한 MemberService를 반환함
		.- 즉 하나의 객체로 재사용이 가능함

	4. ** 중요 ** 싱글톤 방식의 주의점
		.- 스프링 빈은 항상 stateless(무상태)로 설정해야함
		.- 같은 객체를 공유하다보니까 멀티쓰레드(잘 몰라..)가 발생했을 시 나는 1만원을 요구했는데 중간에 다른사람이
			2만원을 요구한게 고대로 들어오는 경우가 발생함 (돈 문제 발생하면 난리나겠지?)
		.- 변수로 price를 설정해서 this.price로 받는 것이 아닌 반환값을 int로 한 후 return을 price로 받아야 함
		.- 그럼 어떤 클라이언트의 요청에 상관없이 그 순간 자신의 값은 return받기 때문에 다른 클라이언트에 영향을 받지 않음

	5. @Configuration과 싱글톤
		.- memberRepository가 3번 호출되는게 맞는거 같은데 정작 1번만 호출되었다..!?
	
	6. @Configuration과 바이트코드 조작의 마법!
		.- bean을 출력했는데 bean.getClass() = class hello.core.AppConfig$$EnhancerBySpringCGLIB$$7afd499e 이러케 나왔는디
		.- $$EnhancerBySpringCGLIB$$7afd499e 이 부분이 뭐지?
		.- 스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은 임의의 다른 클래스를 만들고
		 	그 다른 클래스를 스프링 빈으로 등록한 것!
		.- 즉 스프링 조작과 관련된 부분은 @Configuration을 박고 시작하자

** 컴포넌트 스캔 **

	1. 위에선 스프링 빈을 등록할 때 @Bean이나 XML을 활용하였다. 근데 만약에 수백가지 bean이 필요하다면...?
		.- @ComponentScan --> @Component가 붙은 class를 Bean으로 생성해줌
		.- excludeFilters --> @component중에 빼고 싶은거 빼기위해 사용

		.- @Component가 붙은 애들을 다 스프링 컨테이너 빈으로 등록을 하는데 의존관계가 주입이 되는 방법이 없음
		.- 그래서 @Autowired를 통해 의존관계를 주입해줌
		.- @Autowired가 붙은 곳의 타입을 통해 의존관계가 생성됨


2022-02-26

	2. 
		.- basePackages로 탐색할 패키지의 시작 위치를 지정한다. 이 패키지를 포함한 하위 패키지 모두 검색
		.- basePackageClasses는 지정한 클래스의 패키지를 탐색 시작 위치로 지정한다.
		
		.- 컴포넌트 스캔의 기본 대상
			.- @Component, @Controller, @Service, @Repository, @Configuration

	3. 필터 (그냥 @Conponent 정해진거 쓰는걸 권장)
		.- @Target(ElementType.TYPE), @Retention(RetentionPolicy.RUNTIME) ,@Documented
		.- includeFilters : 컴포넌트 스캔 대상을 추가로 지정한다 // excludeFilters : 컴포넌트 스캔에서 제외할 대상을 지정한다
		
	4. 중복 등록과 충돌
		.- 자동 빈 등록 vs 자동 빈 등록 -> ConflictingBeanDefinitionException예외 발생
		
		.- 수동 빈 등록 vs 자동 빈 등록 -> 수동 빈 등록이 우선
		.- 최근 스프링 부트에서는 수동 빈 등록과 자동 빈 등록이 충돌나면 오류가 발생하도록 기본 값을 바꿈

** 컴포넌트 스캔 끝!**

2022-02-28
** 의존관계 자동 주입 **

	1. 다양한 의존관계 주입
		.- 생성자 주입
			1_ 지금까지 한 방법이 이거
			2_ 생성자 호출시점에 딱 1번만 호출되는 것이 보장
			3_ 생성자가 딱 1개이면 @Autowired 생략 가능
		.- 수정자 주입 (setter)
			1_ 자바빈 프로퍼티 규약의 수정자 메서드 방식을 활용 (private로 변수를 만들고 게터나 세터로만 접근가능하게 하는 것)
			2_ 선택이나 변경 가능성이 있는 의존관계에 사용
		.- 필드 주입
			1_ 직접적인 필드 주입은 권장하지 않음
		.- 일반 메소드 주입
			1_ 한번에 여러 필드를 주입 받을 수 있음
			2_ 하지만 잘 쓰지 않음
	
	2. 옵션 처리
		.- @Autowired 만 사용하면 required 옵션의 기본값이 true 로 되어 있어서 자동 주입 대상이 없으면 오류가 발생한다
		.- @Autowired --> 호출 자체가 안됨
		.- @Nullable --> null 반납
		.- Optional<> --> Optional.empty 반납

	3. 생성자 주입을 선택해보거라!
		.- 생성자 주입 방식을 선택하는 이유는 여러가지가 있지만, 프레임워크에 의존하지 않고, 순수한 자바 언어의
			특징을 잘 살리는 방법이기도 하다
		.- 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에는 수정자 주입 방식을 옵션으로 부여하면 된다
		.- 생성자 주입과 수정자 주입을 동시에 사용할 수 있다
		.- 항상 생성자 주입을 선택해라! 그리고 가끔 옵션이 필요하면 수정자 주입을 선택해라. 필드 주입은 사용하지 않는게 좋다

	4. 롬복!!
		.- 대부분은 사실 다 불변이라 final을 사용하게 됨
		.- 그럼 생성자도 만들고 주입 받은 값을 대입하는 코드도 필요함
		.- 그래서 나온게 lombok!

		.- 설치 방법
			1_ lombok 라이브러리 및 설정 코드를 build.gradle에 추가
			2_ file -> settings 에 가서 plugin 추가 및 Annotation Processors 검색 Enable annotation processing 체크 (재시작)

		-. 롬복 라이브러리가 제공하는 @RequiredArgsConstructor 기능을 사용하면 final이 붙은 필드를 모아서
			생성자를 자동으로 만들어준다. (다음 코드에는 보이지 않지만 실제 호출 가능하다.)

2022-03-01
	5. 조회 빈이 2개 이상 -문제
		.- 

	6. @Autowired필드 명, @Quilifier, @Primary
		.- 조회 대상 빈이 2개 이상일 경우 해결 방법 세 가지

		.- @Autowired --> 타입 매칭 , 타입 매칭의 결과가 2개 이상일 때 필드 명, 파라미터 명으로 빈 이름 매칭
		.- @Quilifier --> @Qualifier끼리 매칭,  빈 이름 매칭, NoSuchBeanDefinitionException 예외 발생
		.- @Primary --> 우선순위를 정하는 것 근데 @Primary보단 @Quilifier가 우선순위가 높게 잡혀서 처리됨

		.- 자주쓰는건 @Primary로 편하게 설정하고, 자주 안쓰는건 @Quilifier를 사용하여 명시적으로 더 잘 보이도록 처리하면 깔끔한 코드
	
	7. 애노테이션 직접 만들기
		.- @Qualifier.class에 가서 어노테이션들을 다 복사 후 내가 새롭게 만들고자 하는 annotation에 붙여넣기 한다
		.- 그리고 마지막에 @Qualifier("내가사용하고자하는이름")의 어노테이션을 추가하면 다른곳에서 저 이름으로 @사용하고자하는이름
			으로 사용이 가능함

	8. 조회한 빈이 모두 필요할 때 List, Map
		.- Map으로 받아올 경우 그때 그떄 사용이 가능하다는거 같음...잘모르겠음...

	9. 자동, 수동의 올바른 실무 운영 기준
		.- 
	
** 의존관계 자동 주입 끝 **

2022-03-03 (요정 생일~)
** 빈 생명주기 콜백 **

	1. 빈 생명주기 콜백 시작
		.- 등장배경 : 데이터베이스 커넥션 풀이나, 네트워크 소켓처럼 애플리케이션 시작 시점에 필요한 연결을 미리 해두고,
				애플리케이션 종료 시점에 연결을 모두 종료하는 작업을 진행하려면, 객체의 초기화와 종료 작업이 필요함
		.- 스프링 빈의 라이프사이클 --> "객체 생성" -> "의존관계 주입"
		.- 스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 기능을 제공
		.- 또한 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 줌

		.- 스프링 빈의 이벤트 라이프 사이클 --> 스프링 컨테이너 생성 스프링 빈 생성 의존관계 주입 초기화 콜백 사용 소멸전 콜백 스프링 종료
			.- 초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
			.- 소멸전 콜백 : 빈이 소멸되기 직전에 호출

	2. 인터페이스 InitializingBean, DisposableBean
		.- InitializingBean(초기화), DisposableBean(소멸) 인터페이스 단점
			1_ 스프링 전용 인터페이스임
			2_ 이름 변경이 x
			3_ 외부 라이브러리에 적용할 수 없다

	3. 빈 등록 초기화, 소멸 메소드
		.- 위에 있는 단점들을 다 보안할 수 있는 장점이 있음
		.- initMethod=" " , destroyMethod=" " 로 사용 

	4. @PostConstruct, @PreDestroy
		.- 걍 이걸로 쓰도록 하도록 합시다...이게 젤 베스트
		.- 외부에서 코드를 수정해야 한다면 3번으로 그게 아니면 웬만한 건 다 4번으로 활용

** 빈 생명주기 콜백 끝**

** 빈 스코프 **
	1. 빈 스코프란??
		.- 싱글톤 : 기본 스코프
		.- 프로토타입 : 프로토타입의 빈의 생성과 의존관계 주입까지만 하는 스코프
		.- 웹 관련 스코프 : request, session, application 3 가지

	2. 프로토타입 스코프
		.- 싱글톤은 하나의 객체를 쓰는건데 프로토타입 스코프는 새로 계속 만듬
		.- 근데 관리를 안해가지고 요청이 올 때마다 새로운 빈을 생성함
		.- 관리를 안하기 때문에 종료메서드가 호출될 수가 없음!!
		.- 그래서 프로토타입 빈에서는 @PreDestroy가 실행되지 않음

2022-03-04

	3. 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 문제점

	4. 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결
		.- ObjectFactory, ObjectProvider, JSR-330 Provide를 사용 
		.- ObjectFactory: 기능이 단순, 별도의 라이브러리 필요 없음, 스프링에 의존
		.- ObjectProvider: ObjectFactory 상속, 옵션, 스트림 처리등 편의 기능이 많고, 별도의 라이브러리 필요없음, 스프링에 의존
		.- JSR-330 provide를 사용하기 위해선 javax.inject:javax.inject:1 라이브러리를 gradle에 추가해야 함

	5. 웹 스코프
		.- 웹 환경에서 동작
		.- 프로토타입 스코프와 다르게 종료메서드가 호출됨

		.- 웹 스코프 종류에는 request, session, application, websocket이 있으나 다들 비슷하므로 여기선 reqeust로 공부
		.- 큰 특징으로는 client에 따라서 그 client의 전용 request.scope가 있는것 같음...

	6. request scope 예제 만들기
		.- common 패키지에 MyLogger.class 생성, web 패키지에 LogDemoController랑 LogDemoService 생성
		.- MyLogger에서는 log출력을 위한 코드
		.- Controller에선 요청이 들어올 시 처리하는 로직 정리
		.- Service에선 MyLogger를 받아서 처리
		.- 문제점 발생
			1_ request scope 빈은 생성되지 않았음
			2_ 싱글톤 어쩌구저쩌구...라고함

	7. 6번의 문제점 해결하기
		.- 위에서 배운 Provider 사용...!
		.- 개발자들은 미쳤어... 코드를 더 줄이기 위해 8번을 사용함

	8. 스코프와 프록시
		.- @Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)
		.- class면 TARGET_CLASS , interface면 TARGET_INTERFACE
		
		.- 프록시로 만든것을 호출하면 CGLIB가 만든것이 확인이 됨
		.- 즉 가짜프록시 객체를 만들어두고 요청이 직접들어오면 그때서야 바꿔주는거
		.- 결국 싱글톤 객체를 사용하듯이 사용할 수 있는 장점이 있음 --> 다형성과 DI의 특징이 아주 잘 보이쥬??

 	
** 빈 스코프 끝**

		******** 이거는 나름대로 복습하면서 정리한 것이므로 제대로 된 필기노트 보면서 가아아끔씩 복습해줄 것! ********











