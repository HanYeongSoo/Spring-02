2022-02-16

	1. 프로젝트 생성
		.- start.spring.io 가서 생성
		.- gradle.build로 프로잭트 불러온 후 file -> settings -> gradle검색 후 실행환경 인텔리제이로 변경

	2. 비즈니스 요구사항과 설계
		
	3. 회원 도메인 설계
		.- 도메인 협력 관계 -> 클래스 다이어그램(정적) -> 객체 다이어그램(동적) (뒤로 갈수록 좀 더 자세한 관계로 설명)

	4. 회원 도메인 개발
		.- HashMap에서 동시성 이슈?? 발생이 있을 수 있음 (실무에선)
	
		.- Grade 이라는 Enum생성 (Enum이 뭐지...)
		.- Member 객체 생성
		.- MemberService 인터페이스, MemberServiceImpl 생성
		.- MemberRepository 인터페이스 , MemoryMemberRepository 생성

	5. 회원 도메인 실행과 테스트
		.- 결과 확인은 항상 test쪽에서 하는게 좋음
		.- 초록불 ok! 빨간불 no..

	6. 주문과 할인 도메인 설계
		.- 아직 무엇을 정확하게 사용할 지 모를 때
		.- 주문 서비스 구현체를 만들어 두면 그떄그떄 변경이 아주 용이함

	7. 주문과 할인 도메인 개발
		.- 회원도메인과 구조는 비슷
	
	8. 주문과 할인 도메인 실행과 테스트
		.- 회원도메인과 구조는 비슷


** 새로운 할인 정책을 추가해주세요 라는 요구가 갑자기 들어옴 ** 

	

2022-02-17

	1. 관심사의 분리가 필요함
		.- 너무 구체적으로 구현체를 선정할 필요가 없음
		.- 배우가 상대배우를 섭외하지 않음 -> 공연 기획자가 섭외를 담당해야함
		.- 공연 기획자를 만들어야함 (AppConfig로 생성)

		.- AppConfig class 생성
		.- MemberService를 생성
		.- 생성자를 통해서 객체를 주입 => '생성자 주입' 이라고 함
		.- 이제부터 객체생성은 AppConfig에서 하고, Member(Order)ServiceImpl에서는 생성자에 들어온 값을 토대로 실행만!!

		.- 이것이 DI(Dependency Injection) 의존관계 주입, 의존성 주입이라고 한다.

	
	






















